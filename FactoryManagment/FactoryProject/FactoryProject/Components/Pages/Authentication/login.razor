@page "/login"
@layout AuthLayout
@rendermode InteractiveServer
<PageTitle>Login</PageTitle>

<div class="d-flex flex-column w-75 justify-content-center mt-5 m-auto border border-1 p-5 shadow shadow-sm">
    
    <div class="mb-3"><h3 class="text-center">Login</h3></div><br />

    <EditForm Model="loginModel" OnValidSubmit="LoginUserAsync" class="form-group" Enhance>
        <DataAnnotationsValidator />
        <div class="d-grid col-auto">
            <label class="form-label">Email</label>
            <InputText type="email" @bind-Value="loginModel.Email" class="@GetInputClass(nameof(loginModel.Email))" placeholder="email@example.com" />
            <ValidationMessage For="@(()=>loginModel.Email)" />
            <br />
            <label class="form-label">Password</label>
            <InputText type="password" @bind-Value="loginModel.Password" class="@GetInputClass(nameof(loginModel.Email))" placeholder="Password" />
            <ValidationMessage For="@(()=>loginModel.Password)" />
            <br />
            <div class="d-grid justify-content-center">
                <div>Don't have an account yet? <a href="/register">Register</a></div>
                <button type="submit" class="btn btn-primary m-4">
                    <i class="fa-solid fa-right-to-bracket"></i>
                    <span class="ms-2">Login</span>
                </button>
            </div>
        </div>
    </EditForm>
</div>


@code {
    [SupplyParameterFromForm(FormName ="LoginForm")]
    private LoginModel loginModel=new();
    [CascadingParameter]private EditContext? editContext;
    private string GetInputClass(string fieldName)
    {
        if (editContext == null)
            return "form-control form-input";

        var fieldIdentifier = new FieldIdentifier(loginModel, fieldName);
        var fieldState = editContext.GetValidationMessages(fieldIdentifier);

        if (fieldState.Any())
            return "form-control form-input is-invalid";
        else
            return "form-control form-input";
    }

}
