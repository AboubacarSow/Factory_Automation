@page "/admin/createpersonal"
@using FactoryProject.Models.PersonalDtos
@layout AdminLayout
@inject IUnitOfWork _unitOfWork
@inject GenericStateService<ResultPersonalDto> _personalStateService
@inject NavigationManager _navigationManager
<!-- Header Content Begin-->
<PageTitle>Create Personal</PageTitle>
<HeadContent>
    <link href="/css/creating.css" rel="stylesheet" />
</HeadContent>
<!-- Header Content End-->

<div class="form-container mx-3">
    <h4 class="title text-center"><i class="fas fa-plus me-2"></i>Adding Category</h4>
    <hr class="mb-4" />
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-triangle-exclamation"></i>
            @errorMessage
        </div>
    }
    <EditForm FormName="CreateForm" Model="@personal" OnValidSubmit="@CreatePersonalAsync" Enhance>
        <DataAnnotationsValidator />

        <div class="mb-3 form-div">
            <label for="personalName" class="form-label">Personal Name</label>
            <InputText type="text" class="@GetInputClass(nameof(personal.name))"
            id="personalName" placeholder="Enter Personal Name" @bind-Value="personal.name" />
            <ValidationMessage For="@(() => personal.name)" class="text-danger" />
        </div>
        <div class="mb-3 form-div">
            <label for="personalIdentifier" class="form-label">Identifier</label>
            <InputText type="text" class="@GetInputClass(nameof(personal.identifier))"
             id="personalIdentifier" placeholder="Enter Personal Identifier" @bind-Value="personal.identifier" />
            <ValidationMessage For="@(() => personal.identifier)" class="text-danger" />
        </div> 
        <div class="mb-3 form-div">
            <label for="personalIdentifier" class="form-label">Gender</label>
            <label>
                <InputRadio type="text" class="@GetInputClass(nameof(personal.identifier))"
                 id="personalIdentifier" placeholder="Enter Personal Identifier" @bind-Value="personal.identifier" />
                <ValidationMessage For="@(() => personal.identifier)" class="text-danger" />

            </label>
        </div>



        <div class="d-flex justify-content-center">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-plus"></i>
                Create
            </button>
            <a href="/admin/personals" class="btn btn-secondary ms-2">
                <i class="fas fa-list"></i>
                Personals
            </a>
        </div>
    </EditForm>

</div>


@code {
    private string? errorMessage{ get; set; }
    [SupplyParameterFromForm(FormName ="CreateForm")]
    private CreatePersonalDto personal { get; set; } = new();
    private EditContext? editContext{ get; set; }
    private List<ResultDepartmentDto> _departments = [];
    protected async override Task OnInitializedAsync()
    {
        _departments = await _unitOfWork
                            .DepartmentService
                            .GetAllDepartmentAsync();
    }
    private async Task CreatePersonalAsync()
    {
        
    }
    private string GetInputClass(string fieldName)
    {
        if (editContext == null) return "form-control form-input";
        // Check if the field is valid
        var fieldIdentifier = new FieldIdentifier(personal, fieldName);
        var isInvalid = editContext?.GetValidationMessages(fieldIdentifier).Any() == true;
        return isInvalid ? "form-control form-input invalid" : " form-control form-input";
    }


}
