@page "/admin/categories"
@layout AuthLayout
@attribute [Authorize(Roles ="ADMIN")]
@inject GenericStateService<ResultCategoryDto> _categoryStateService
@inject IUnitOfWork _unitOfWork

<PageTitle> Categories </PageTitle>


@if (_categories == null)
{
    <p> <em> Loading...</em></p>
}else{
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div class="entete">
            <h4 class="title"><i class="fas fa-list me-2"></i>List of Categories</h4>
            <a href="admin/createproduct" class="btn btn-outline-primary ms-2">
                <i class="fas fa-plus"></i>
                Add New Category
            </a>
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="fa-solid fa-triangle-exclamation"></i>
                @errorMessage
            </div>
        }

        @if(!String.IsNullOrEmpty(_categoryStateService.SuccessMessage))
        {
            <div class="alert alert-info" role="alert">
                <i class="fa-solid fa-circle-check"></i>
                @_categoryStateService.SuccessMessage
            </div>
        }
        <div class="container margin-auto mb-3 table-responsive tableau">
            <table class="table table-hover table-striped table-sm ">
                <thead class="rounded-3 table-header">
                    <tr>
                        <th>NÂ°</th>
                        <th>Name</th>
                        <th>Operations</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        count = 0;
                    }
                    @foreach (var category in _categories)
                    {
                        count++;
                        <tr class="text-nowrap">
                            <td>@count</td>
                            <td>@category.Name</td>
                            <td>
                                <div class="btn btn-group">
                                    <button class="btn btn-danger" @onclick="() => Delete(category.Id)">
                                        <i class="fa fa-trash me-1"></i> 
                                    </button>
                                    <a href="admin/editCategory/@category?.Id" class="btn btn-success">
                                        <i class="fa fa-edit me-1"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code{
    private List<ResultCategoryDto> _categories{get;set;}=[];
    private string? errorMessage{get;set;}=string.Empty;
    private int count{get;set;}
    private IJSRuntime JS{get;set;}
     protected async override Task OnInitializedAsync()
    {
        if (!_categoryStateService.Models.Any())
        {
            await GetAllCategories();
        }
        else
        {
            _categories = _categoryStateService.Models;
        }
        _categories=await _unitOfWork.CategoryService.GetAllCategoriesAsync();
        _categoryStateService.OnBooksChanged += StateHasChanged;
    }
    private async Task GetAllCategories()
    {
        _categories= await _unitOfWork
                        .CategoryService
                        .GetAllCategoriesAsync();
    }
    private async Task Delete(int id)
    {
        try
        {
            var category= _categories.FirstOrDefault(p=>p.Id==id);
            await _unitOfWork.CategoryService.DeleteCategoryAsync(id);
            _categoryStateService.RemoveItem(category);
        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("console.log",ex);
            errorMessage="Failed to deleted this item";
            await Task.Run(async () =>
            {
                await Task.Delay(1000);
                errorMessage=string.Empty;
            });
        }
    }


    
}