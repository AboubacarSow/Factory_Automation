@page "/admin/orders"
@layout AdminLayout
@attribute [Authorize(Roles = "ADMIN")]
@rendermode InteractiveServer
@implements IDisposable
@inject OrderStateService _orderStateService
@inject IUnitOfWork _unitOfWork


<PageTitle>Orders </PageTitle>

@if (_orders == null || _orders.Count==0)
{
    <div class="alert alert-info rounded-4 shadow-2" role="alert" style="border:none;border-radius:30px;">
        <p class="text-center fs-3">
            <i class="fas fa-exclamation-triangle"></i>
            There is no order Yet !
        </p>
    </div>
}
else
{
    <div class="container mx-3">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="entete">
                <h4 class="title"><i class="fas fa-list me-2"></i>List of Orders</h4>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-triangle"></i>
                @errorMessage
            </div>
        }

        @if (!String.IsNullOrEmpty(_orderStateService.SuccessMessage))
        {
            <div class="alert alert-info" role="alert">
                <i class="far fa-check-circle"></i>
                @_orderStateService.SuccessMessage
            </div>
        }
        <div class="container margin-auto mb-3 table-responsive tableau">
            <table class="table table-hover table-striped table-sm ">
                <thead class="rounded-3 table-header">
                    <tr>
                        <th>N°</th>
                        <th>Product Name</th>
                        <th>Total Price</th>
                        <th>Order Date</th>
                        <th>Status</th>
                        <th class="text-center">Operations</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        count = 0;
                    }
                    @foreach (var order in _orders)
                    {
                        count++;
                        <tr class="text-nowrap">
                            <td>@count</td>
                            <td>@order.cart?.product?.Name</td>
                            <td>@((order.cart.quantity/50)* order.cart.product.Price) </td>
                            <td>@order.cart.createdAt </td>
                            <td>
                                @if(order.delivered)
                                {
                                    <span class="badge rounded-pill text-bg-info text-dark">Delivered</span>
                                }
                                else{
                                    <span class="badge rounded-pill text-bg-warning text-dark">Not Delivered Yet</span>
                                }
                            </td>
                            <td>
                                <div class="btn btn-group">
                                    <a class="btn btn-success" href="/admin/editorder/@order.id">
                                        <i class="fa fa-edit me-1"></i>
                                        Update
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<ResultOrderDto> _orders { get; set; } = [];
    private string? errorMessage { get; set; } = string.Empty;
    private UpdateOrderDto updateOrder = new();
    private int count { get; set; }
    private IJSRuntime JS { get; set; }
    protected async override Task OnInitializedAsync()
    {
        if (!_orderStateService.Orders.Any())
        {
            await GetAllOrdersAsync();
            _orderStateService.SetOrders(_orders);

        }
        else
        {
            _orders = _orderStateService.Orders;
        }
        _orderStateService.OnOrderChanged += StateHasChanged;
    }
    protected override void OnParametersSet()
    {
        if (_orderStateService.Orders != null && _orderStateService.Orders.Count > 0)
        {
            count = 0;
            _orders = _orderStateService.Orders;
        }
    }
    public void Dispose()
    {
        _orderStateService.OnOrderChanged -= StateHasChanged;
    }

    private async Task GetAllOrdersAsync()
    {
        _orders = await _unitOfWork
                        .OrderService
                        .GetAllOrderAsync();
    }
   
  



}
